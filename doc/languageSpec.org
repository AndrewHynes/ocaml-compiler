* Introduction

This language's creation is for my third year Compiler Construction module for the MSci Computer Science course at the University of Birmingham.

* Inspiration

CALF aims to be functional, easy to use, and heavily inspired by ML. CALF is all about being easy for the programmer. The syntax aims to be intuitive and easy to understand.

* Syntax

** Grammar

The grammar of this language is – for now – one based off two kinds of statements. The first are statements that return a result, such as 3 + x, and the second are statements that produce some kind of side effect or do not return a result, such as print "hello!", let x = 3, or the definition of a function.

You can have as many of the second kind of statement as you want, but zero or one statements that returns a result which must be at the end of the program. Each statement of the second type must end with a semi colon, but statements of the first type do not need to. Whitespace is ignored. 

Example programs that compile:

#+BEGIN_SRC language
3 + 3
#+END_SRC

#+BEGIN_SRC language
print "hello world";
#+END_SRC

#+BEGIN_SRC language
let x = 3; x + 7
#+END_SRC

** Whitespace

Newlines and spaces (or the lack thereof) are ignored. The following programs are equivalent:

#+BEGIN_SRC language
let x = 3; 
let y = 8;
print x + y;
#+END_SRC

#+BEGIN_SRC language
let x=3;let y=8;print x+y;
#+END_SRC
** Comments

Comments are represented in CALF with a hash. Any characters after the hash are ignored. The following programs are syntactically equivalent.

#+BEGIN_SRC language
let x = 3; #hello
let y = 8; #world
print x + y; #oo#oo##oo#ooooooo#
#+END_SRC

#+BEGIN_SRC language
let x = 3; 
let y = 8;
print x + y;
#+END_SRC

** Arithmetic and mathematics

The language uses very familiar syntax for arithmetic. Everything you expect to work should work: why make something easy harder than it should be?

*** Addition

Addition of x and 3 is performed via

#+BEGIN_SRC language
x + 3
#+END_SRC

*** Multiplication

Multiplication of x and 3 is performed via

#+BEGIN_SRC language
x * 3
#+END_SRC

*** Subtraction

The subtraction of x by 3 is performed via

#+BEGIN_SRC language
x - 3
#+END_SRC

*** Division

The division of x by 3 is performed via

#+BEGIN_SRC language
x / 3
#+END_SRC

** Logic

Booleans and truth are fully supported concepts in CALF. The built-in operators are as follows:

*** And
#+BEGIN_SRC language
x && y #True if both x and y are true
#+END_SRC

*** Or

#+BEGIN_SRC language
x || y #True if either x or y is true (or both)
#+END_SRC

** Comparison

To compare two numbers, we can use a variety of operators, which return a boolean result. The operators are as follows:

#+BEGIN_SRC language
x == y #True if x is equal to y
#+END_SRC

#+BEGIN_SRC language
x < y #True if x is less than y
#+END_SRC

#+BEGIN_SRC language
x <= y #True if x is less than or equal to y
#+END_SRC

#+BEGIN_SRC language
x > y #True if x is greater than y
#+END_SRC

#+BEGIN_SRC language
x >= y #True if x is greater than or equal to y
#+END_SRC

** Lambda expressions

Lambda expressions are just like any other type of variable, as functions are first class. You can bind them to a variable or use them as anonymous functions for convenience. One might define a 'double' function as follows:

#+BEGIN_SRC language
lamda x -> x * 2
#+END_SRC

It may be worth pointing out that "λ" can replace "lambda", and "→" can replace "->". To make the previous expression a lot prettier, we could write it as: 

#+BEGIN_SRC language
λ x → x * 2
#+END_SRC

Or they might bind it as a variable using let...

#+BEGIN_SRC language
let double = lamda x -> x * 2;
#+END_SRC

** Functions

A function can be defined using the keyword func. The function's body is enclosed in braces. Examples include:

#+BEGIN_SRC language
func double x = 
{ 
  x * 2 
};
#+END_SRC

#+BEGIN_SRC language
func printAndAdd30 x = 
{ 
  let x = 30;
  print x;
  x + 30
};
#+END_SRC

Functions application must be surrounded with a backtick and an apostrophe (using the syntax `f arg1 arg2'), as follows:

#+BEGIN_SRC language
func printAndAdd30 x = 
{ 
  let x = 30;
  print x;
  x + 30
};

let x = `printAndAdd30 20';
x
#+END_SRC


* Optimisation

CALF implements a varienty optimisations, including

- Replaces maths with constants (e.g. replaces 3 + 3 with 6)

- Replaces boolean expressions with constants (e.g. replaces !false with true)

- Replaces if-then-else statements with the correct branch if the boolean is not dependent on variables

- Does this recursively and fully optimises the AST (for example, it would simplify the expression (lambda _ -> lambda _ -> 6) to (lambda _ -> lambda _ -> 6)

To find more about the optimisations, see the documentation found at htmlDocs/optimiser.ml. This would, for example, optimise the following:

#+BEGIN_SRC language
let x = 11 * 2;
if (true && false)
then 5
else 3 + 7
#+END_SRC

To:

#+BEGIN_SRC language
let x = 22;
10
#+END_SRC

