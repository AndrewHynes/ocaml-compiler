* Introduction

This language's creation is for my third year Compiler Construction module for the MSci Computer Science course at the University of Birmingham.

* Inspiration

The language aims to be functional, easy to use, and heavily inspired by ML. Its type system is Hindley-Milner based, and the programmer should not have to specify types explicitly, they should be inferred.

* Syntax

** Grammar

The grammar of this language is – for now – one based off two kinds of statements. The first are statements that return a result, such as 3 + x, and the second are statements that produce some kind of side effect or do not return a result, such as print "hello!", let x = 3, or the definition of a function.

You can have as many of the second kind of statement as you want, but zero or one statements that returns a result which must be at the end of the program. Each statement of the second type must end with a semi colon, but statements of the first type do not need to. Whitespace is ignored. 

Example programs that compile:

#+BEGIN_SRC language
3 + 3
#+END_SRC

#+BEGIN_SRC language
print "hello world";
#+END_SRC

#+BEGIN_SRC language
let x = 3; x + 7
#+END_SRC

** Whitespace

Newlines and spaces (or the lack thereof) are ignored. The following programs are equivalent:

#+BEGIN_SRC language
let x = 3; 
let y = 8;
print x + y;
#+END_SRC

#+BEGIN_SRC language
let x=3;let y=8;print x+y;
#+END_SRC

** Arithmetic and mathematics

The language uses very familiar syntax for arithmetic. Everything you expect to work should work: why make something easy harder than it should be?

*** Addition

Addition of x and 3 is performed via

#+BEGIN_SRC language
x + 3
#+END_SRC

*** Multiplication

Multiplication of x and 3 is performed via

#+BEGIN_SRC language
x * 3
#+END_SRC

*** Subtraction

The subtraction of x by 3 is performed via

#+BEGIN_SRC language
x - 3
#+END_SRC

*** Division

The division of x by 3 is performed via

#+BEGIN_SRC language
x / 3
#+END_SRC

** Lambda expressions

Lambda expressions are just like any other type of variable, as functions are first class. You can bind them to a variable or use them as anonymous functions for convenience. One might define a 'double' function as follows:

#+BEGIN_SRC language
lamda x -> x * 2
#+END_SRC

It may be worth pointing out that "λ" can replace "lambda", and "→" can replace "->". To make the previous expression a lot prettier, we could write it as: 

#+BEGIN_SRC language
λ x → x * 2
#+END_SRC

Or they might bind it as a variable using let...

#+BEGIN_SRC language
let double = lamda x -> x * 2;
#+END_SRC

** Functions

A function can be defined using the keyword func...

#+BEGIN_SRC language
func double x = x * 2;
#+END_SRC


